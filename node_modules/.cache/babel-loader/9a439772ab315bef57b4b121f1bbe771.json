{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ConnectionError, ConnectionNotOpenError, InvalidClientError, MaxAttemptsReachedOnReconnectingError, PendingRequestsOnReconnectingError, RequestAlreadySentError, Web3WSProviderError } from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\nconst DEFAULT_RECONNECTION_OPTIONS = {\n  autoReconnect: true,\n  delay: 5000,\n  maxAttempts: 5\n};\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n\nexport class SocketProvider extends Eip1193Provider {\n  /**\n   * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n   * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n   * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n   */\n  constructor(socketPath, socketOptions, reconnectOptions) {\n    super();\n    this._connectionStatus = 'connecting'; // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n\n    this._onMessageHandler = this._onMessage.bind(this);\n    this._onOpenHandler = this._onConnect.bind(this);\n    this._onCloseHandler = this._onCloseEvent.bind(this);\n    this._onErrorHandler = this._onError.bind(this);\n    if (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n    this._socketPath = socketPath;\n    this._socketOptions = socketOptions;\n    this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});\n    this._pendingRequestsQueue = new Map();\n    this._sentRequestsQueue = new Map();\n\n    this._init();\n\n    this.connect();\n    this.chunkResponseParser = new ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);\n    this.chunkResponseParser.onError(() => {\n      this._clearQueues();\n    });\n    this.isReconnecting = false;\n  }\n\n  get SocketConnection() {\n    return this._socketConnection;\n  }\n\n  _init() {\n    this._reconnectAttempts = 0;\n  }\n  /**\n   * Try to establish a connection to the socket\n   */\n\n\n  connect() {\n    try {\n      this._openSocketConnection();\n\n      this._connectionStatus = 'connecting';\n\n      this._addSocketListeners();\n    } catch (e) {\n      if (!this.isReconnecting) {\n        this._connectionStatus = 'disconnected';\n\n        if (e && e.message) {\n          throw new ConnectionError(`Error while connecting to ${this._socketPath}. Reason: ${e.message}`);\n        } else {\n          throw new InvalidClientError(this._socketPath);\n        }\n      } else {\n        setImmediate(() => {\n          this._reconnect();\n        });\n      }\n    }\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _validateProviderPath(path) {\n    return !!path;\n  }\n  /**\n   *\n   * @returns the pendingRequestQueue size\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  getPendingRequestQueueSize() {\n    return this._pendingRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns the sendPendingRequests size\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  getSentRequestsQueueSize() {\n    return this._sentRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns `true` if the socket supports subscriptions\n   */\n  // eslint-disable-next-line class-methods-use-this\n\n\n  supportsSubscriptions() {\n    return true;\n  }\n\n  on(type, listener) {\n    this._eventEmitter.on(type, listener);\n  }\n\n  once(type, listener) {\n    this._eventEmitter.once(type, listener);\n  }\n\n  removeListener(type, listener) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n\n  _onDisconnect(code, data) {\n    this._connectionStatus = 'disconnected';\n\n    super._onDisconnect(code, data);\n  }\n  /**\n   * Disconnects the socket\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n\n\n  disconnect(code, data) {\n    const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;\n\n    this._removeSocketListeners();\n\n    if (this.getStatus() !== 'disconnected') {\n      this._closeSocketConnection(disconnectCode, data);\n    }\n\n    this._onDisconnect(disconnectCode, data);\n  }\n  /**\n   * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n   * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0\n   * @param ms - Determines the ms of setInterval\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n\n\n  safeDisconnect(code, data) {\n    let forceDisconnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let ms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    return __awaiter(this, void 0, void 0, function* () {\n      let retryAttempt = 0;\n\n      const checkQueue = () => __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => {\n          const interval = setInterval(() => {\n            if (forceDisconnect && retryAttempt === 5) {\n              this.clearQueues();\n            }\n\n            if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n              clearInterval(interval);\n              resolve(true);\n            }\n\n            retryAttempt += 1;\n          }, ms);\n        });\n      });\n\n      yield checkQueue();\n      this.disconnect(code, data);\n    });\n  }\n  /**\n   * Removes all listeners for the specified event type.\n   * @param type - The event type to remove the listeners for\n   */\n\n\n  removeAllListeners(type) {\n    this._eventEmitter.removeAllListeners(type);\n  }\n\n  _onError(event) {\n    // do not emit error while trying to reconnect\n    if (this.isReconnecting) {\n      this._reconnect();\n    } else {\n      this._eventEmitter.emit('error', event);\n    }\n  }\n  /**\n   * Resets the socket, removing all listeners and pending requests\n   */\n\n\n  reset() {\n    this._sentRequestsQueue.clear();\n\n    this._pendingRequestsQueue.clear();\n\n    this._init();\n\n    this._removeSocketListeners();\n\n    this._addSocketListeners();\n  }\n\n  _reconnect() {\n    if (this.isReconnecting) {\n      return;\n    }\n\n    this.isReconnecting = true;\n\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n\n    if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n      this._reconnectAttempts += 1;\n      setTimeout(() => {\n        this._removeSocketListeners();\n\n        this.connect();\n        this.isReconnecting = false;\n      }, this._reconnectOptions.delay);\n    } else {\n      this.isReconnecting = false;\n\n      this._clearQueues();\n\n      this._removeSocketListeners();\n\n      this._eventEmitter.emit('error', new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));\n    }\n  }\n  /**\n   *  Creates a request object to be sent to the server\n   */\n\n\n  request(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isNullish(this._socketConnection)) {\n        throw new Error('Connection is undefined');\n      } // if socket disconnected - open connection\n\n\n      if (this.getStatus() === 'disconnected') {\n        this.connect();\n      }\n\n      const requestId = jsonRpc.isBatchRequest(request) ? request[0].id : request.id;\n\n      if (!requestId) {\n        throw new Web3WSProviderError('Request Id not defined');\n      }\n\n      if (this._sentRequestsQueue.has(requestId)) {\n        throw new RequestAlreadySentError(requestId);\n      }\n\n      const deferredPromise = new Web3DeferredPromise();\n      deferredPromise.catch(error => {\n        this._eventEmitter.emit('error', error);\n      });\n      const reqItem = {\n        payload: request,\n        deferredPromise\n      };\n\n      if (this.getStatus() === 'connecting') {\n        this._pendingRequestsQueue.set(requestId, reqItem);\n\n        return reqItem.deferredPromise;\n      }\n\n      this._sentRequestsQueue.set(requestId, reqItem);\n\n      try {\n        this._sendToSocket(reqItem.payload);\n      } catch (error) {\n        this._sentRequestsQueue.delete(requestId);\n\n        this._eventEmitter.emit('error', error);\n      }\n\n      return deferredPromise;\n    });\n  }\n\n  _onConnect() {\n    this._connectionStatus = 'connected';\n    this._reconnectAttempts = 0;\n\n    super._onConnect();\n\n    this._sendPendingRequests();\n  }\n\n  _sendPendingRequests() {\n    for (const [id, value] of this._pendingRequestsQueue.entries()) {\n      this._sendToSocket(value.payload);\n\n      this._pendingRequestsQueue.delete(id);\n\n      this._sentRequestsQueue.set(id, value);\n    }\n  }\n\n  _onMessage(event) {\n    const responses = this._parseResponses(event);\n\n    if (isNullish(responses) || responses.length === 0) {\n      return;\n    }\n\n    for (const response of responses) {\n      if (jsonRpc.isResponseWithNotification(response) && response.method.endsWith('_subscription')) {\n        this._eventEmitter.emit('message', response);\n\n        return;\n      }\n\n      const requestId = jsonRpc.isBatchResponse(response) ? response[0].id : response.id;\n\n      const requestItem = this._sentRequestsQueue.get(requestId);\n\n      if (!requestItem) {\n        return;\n      }\n\n      if (jsonRpc.isBatchResponse(response) || jsonRpc.isResponseWithResult(response) || jsonRpc.isResponseWithError(response)) {\n        this._eventEmitter.emit('message', response);\n\n        requestItem.deferredPromise.resolve(response);\n      }\n\n      this._sentRequestsQueue.delete(requestId);\n    }\n  }\n\n  clearQueues(event) {\n    this._clearQueues(event);\n  }\n\n  _clearQueues(event) {\n    if (this._pendingRequestsQueue.size > 0) {\n      this._pendingRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new ConnectionNotOpenError(event));\n\n        this._pendingRequestsQueue.delete(key);\n      });\n    }\n\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new ConnectionNotOpenError(event));\n\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n\n    this._removeSocketListeners();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ConnectionError","ConnectionNotOpenError","InvalidClientError","MaxAttemptsReachedOnReconnectingError","PendingRequestsOnReconnectingError","RequestAlreadySentError","Web3WSProviderError","Eip1193Provider","ChunkResponseParser","isNullish","Web3DeferredPromise","jsonRpc","DEFAULT_RECONNECTION_OPTIONS","autoReconnect","delay","maxAttempts","NORMAL_CLOSE_CODE","SocketProvider","constructor","socketPath","socketOptions","reconnectOptions","_connectionStatus","_onMessageHandler","_onMessage","bind","_onOpenHandler","_onConnect","_onCloseHandler","_onCloseEvent","_onErrorHandler","_onError","_validateProviderPath","_socketPath","_socketOptions","_reconnectOptions","Object","_pendingRequestsQueue","Map","_sentRequestsQueue","_init","connect","chunkResponseParser","_eventEmitter","onError","_clearQueues","isReconnecting","SocketConnection","_socketConnection","_reconnectAttempts","_openSocketConnection","_addSocketListeners","e","message","setImmediate","_reconnect","path","getPendingRequestQueueSize","size","getSentRequestsQueueSize","supportsSubscriptions","on","type","listener","once","removeListener","_onDisconnect","code","data","disconnect","disconnectCode","_removeSocketListeners","getStatus","_closeSocketConnection","safeDisconnect","forceDisconnect","ms","retryAttempt","checkQueue","__awaiter","Promise","resolve","interval","setInterval","clearQueues","clearInterval","removeAllListeners","event","emit","reset","clear","forEach","request","key","deferredPromise","reject","delete","setTimeout","Error","requestId","isBatchRequest","id","has","catch","error","reqItem","payload","set","_sendToSocket","_sendPendingRequests","value","entries","responses","_parseResponses","length","response","isResponseWithNotification","method","endsWith","isBatchResponse","requestItem","get","isResponseWithResult","isResponseWithError"],"sources":["C:\\Users\\vemprala\\Documents\\Blockchain Projects\\faucet-dapp-starter-code-connect-wallet\\node_modules\\web3-utils\\src\\socket_provider.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tConnectionEvent,\n\tEip1193EventName,\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcId,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResult,\n\tProviderConnectInfo,\n\tProviderMessage,\n\tProviderRpcError,\n\tSocketRequestItem,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3Eip1193ProviderEventCallback,\n\tWeb3ProviderEventCallback,\n\tWeb3ProviderMessageEventCallback,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport {\n\tConnectionError,\n\tConnectionNotOpenError,\n\tInvalidClientError,\n\tMaxAttemptsReachedOnReconnectingError,\n\tPendingRequestsOnReconnectingError,\n\tRequestAlreadySentError,\n\tWeb3WSProviderError,\n} from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\n\nexport type ReconnectOptions = {\n\tautoReconnect: boolean;\n\tdelay: number;\n\tmaxAttempts: number;\n};\n\nconst DEFAULT_RECONNECTION_OPTIONS = {\n\tautoReconnect: true,\n\tdelay: 5000,\n\tmaxAttempts: 5,\n};\n\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n\nexport abstract class SocketProvider<\n\tMessageEvent,\n\tCloseEvent,\n\tErrorEvent,\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Eip1193Provider<API> {\n\tprotected isReconnecting: boolean;\n\tprotected readonly _socketPath: string;\n\tprotected readonly chunkResponseParser: ChunkResponseParser;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _pendingRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _sentRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\tprotected _reconnectAttempts!: number;\n\tprotected readonly _socketOptions?: unknown;\n\tprotected readonly _reconnectOptions: ReconnectOptions;\n\tprotected _socketConnection?: unknown;\n\tpublic get SocketConnection() {\n\t\treturn this._socketConnection;\n\t}\n\tprotected _connectionStatus: Web3ProviderStatus;\n\tprotected readonly _onMessageHandler: (event: MessageEvent) => void;\n\tprotected readonly _onOpenHandler: () => void;\n\tprotected readonly _onCloseHandler: (event: CloseEvent) => void;\n\tprotected readonly _onErrorHandler: (event: ErrorEvent) => void;\n\n\t/**\n\t * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n\t * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n\t * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n\t */\n\tpublic constructor(\n\t\tsocketPath: string,\n\t\tsocketOptions?: unknown,\n\t\treconnectOptions?: Partial<ReconnectOptions>,\n\t) {\n\t\tsuper();\n\t\tthis._connectionStatus = 'connecting';\n\n\t\t// Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n\t\tthis._onMessageHandler = this._onMessage.bind(this);\n\t\tthis._onOpenHandler = this._onConnect.bind(this);\n\t\tthis._onCloseHandler = this._onCloseEvent.bind(this);\n\t\tthis._onErrorHandler = this._onError.bind(this);\n\n\t\tif (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n\n\t\tthis._socketPath = socketPath;\n\t\tthis._socketOptions = socketOptions;\n\n\t\tthis._reconnectOptions = {\n\t\t\t...DEFAULT_RECONNECTION_OPTIONS,\n\t\t\t...(reconnectOptions ?? {}),\n\t\t};\n\n\t\tthis._pendingRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\t\tthis._sentRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\n\t\tthis._init();\n\t\tthis.connect();\n\t\tthis.chunkResponseParser = new ChunkResponseParser(\n\t\t\tthis._eventEmitter,\n\t\t\tthis._reconnectOptions.autoReconnect,\n\t\t);\n\t\tthis.chunkResponseParser.onError(() => {\n\t\t\tthis._clearQueues();\n\t\t});\n\t\tthis.isReconnecting = false;\n\t}\n\n\tprotected _init() {\n\t\tthis._reconnectAttempts = 0;\n\t}\n\n\t/**\n\t * Try to establish a connection to the socket\n\t */\n\tpublic connect(): void {\n\t\ttry {\n\t\t\tthis._openSocketConnection();\n\t\t\tthis._connectionStatus = 'connecting';\n\t\t\tthis._addSocketListeners();\n\t\t} catch (e) {\n\t\t\tif (!this.isReconnecting) {\n\t\t\t\tthis._connectionStatus = 'disconnected';\n\t\t\t\tif (e && (e as Error).message) {\n\t\t\t\t\tthrow new ConnectionError(\n\t\t\t\t\t\t`Error while connecting to ${this._socketPath}. Reason: ${\n\t\t\t\t\t\t\t(e as Error).message\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidClientError(this._socketPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tthis._reconnect();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract _openSocketConnection(): void;\n\tprotected abstract _addSocketListeners(): void;\n\n\tprotected abstract _removeSocketListeners(): void;\n\n\tprotected abstract _onCloseEvent(_event: unknown): void;\n\n\tprotected abstract _sendToSocket(_payload: Web3APIPayload<API, any>): void;\n\n\tprotected abstract _parseResponses(_event: MessageEvent): JsonRpcResponse[];\n\n\tprotected abstract _closeSocketConnection(_code?: number, _data?: string): void;\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _validateProviderPath(path: string): boolean {\n\t\treturn !!path;\n\t}\n\t\n\t/**\n\t *\n\t * @returns the pendingRequestQueue size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getPendingRequestQueueSize()  {\n\t\treturn this._pendingRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns the sendPendingRequests size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getSentRequestsQueueSize() {\n\t\treturn this._sentRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns `true` if the socket supports subscriptions\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type.\n\t * @param type - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic on(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic on(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic on(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic on(type: 'accountsChanged', listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.on(type, listener);\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type that will be invoked at most once.\n\t * @param type  - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic once(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic once(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic once(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic once(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.once(type, listener);\n\t}\n\n\t/**\n\t *  Removes a listener for the specified event type.\n\t * @param type - The event type to remove the listener for\n\t * @param listener - The callback to be executed\n\t */\n\tpublic removeListener(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'chainChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.removeListener(type, listener);\n\t}\n\n\tprotected _onDisconnect(code: number, data?: string) {\n\t\tthis._connectionStatus = 'disconnected';\n\t\tsuper._onDisconnect(code, data);\n\t}\n\n\t/**\n\t * Disconnects the socket\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic disconnect(code?: number, data?: string): void {\n\t\tconst disconnectCode = code ?? NORMAL_CLOSE_CODE;\n\t\tthis._removeSocketListeners();\n\t\tif (this.getStatus() !== 'disconnected') {\n\t\t\tthis._closeSocketConnection(disconnectCode, data);\n\t\t}\n\t\tthis._onDisconnect(disconnectCode, data);\n\t}\n\n\t/**\n\t * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n\t * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0  \n\t * @param ms - Determines the ms of setInterval\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic async safeDisconnect(code?: number, data?: string, forceDisconnect = false,ms = 1000) {\n\t\tlet retryAttempt = 0;\n\t\tconst checkQueue = async () => \n\t\t\tnew Promise(resolve => {\n\t\t\t\tconst interval = setInterval(() => {\n\t\t\t\t\tif (forceDisconnect && retryAttempt === 5) {\n\t\t\t\t\t\tthis.clearQueues();\n\t\t\t\t\t}\n\t\t\t\t\tif (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t}\n\t\t\t\t\tretryAttempt+=1;\n\t\t\t\t}, ms)\n\t\t\t})\n\t\t\n\t\tawait checkQueue();\n\t\tthis.disconnect(code, data);\n\t}\n\n\n\t/**\n\t * Removes all listeners for the specified event type.\n\t * @param type - The event type to remove the listeners for\n\t */\n\tpublic removeAllListeners(type: string): void {\n\t\tthis._eventEmitter.removeAllListeners(type);\n\t}\n\n\tprotected _onError(event: ErrorEvent): void {\n\t\t// do not emit error while trying to reconnect\n\t\tif (this.isReconnecting) {\n\t\t\tthis._reconnect();\n\t\t} else {\n\t\t\tthis._eventEmitter.emit('error', event);\n\t\t}\n\t}\n\n\t/**\n\t * Resets the socket, removing all listeners and pending requests\n\t */\n\tpublic reset(): void {\n\t\tthis._sentRequestsQueue.clear();\n\t\tthis._pendingRequestsQueue.clear();\n\n\t\tthis._init();\n\t\tthis._removeSocketListeners();\n\t\tthis._addSocketListeners();\n\t}\n\n\tprotected _reconnect(): void {\n\t\tif (this.isReconnecting) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isReconnecting = true;\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n\t\t\tthis._reconnectAttempts += 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._removeSocketListeners();\n\t\t\t\tthis.connect();\n\t\t\t\tthis.isReconnecting = false;\n\t\t\t}, this._reconnectOptions.delay);\n\t\t} else {\n\t\t\tthis.isReconnecting = false;\n\t\t\tthis._clearQueues();\n\t\t\tthis._removeSocketListeners();\n\t\t\tthis._eventEmitter.emit(\n\t\t\t\t'error',\n\t\t\t\tnew MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t *  Creates a request object to be sent to the server\n\t */\n\tpublic async request<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResultType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIPayload<API, Method>): Promise<JsonRpcResponseWithResult<ResultType>> {\n\t\tif (isNullish(this._socketConnection)) {\n\t\t\tthrow new Error('Connection is undefined');\n\t\t}\n\t\t// if socket disconnected - open connection\n\t\tif (this.getStatus() === 'disconnected') {\n\t\t\tthis.connect();\n\t\t}\n\n\t\tconst requestId = jsonRpc.isBatchRequest(request)\n\t\t\t? (request as unknown as JsonRpcBatchRequest)[0].id\n\t\t\t: (request as unknown as JsonRpcRequest).id;\n\n\t\tif (!requestId) {\n\t\t\tthrow new Web3WSProviderError('Request Id not defined');\n\t\t}\n\n\t\tif (this._sentRequestsQueue.has(requestId)) {\n\t\t\tthrow new RequestAlreadySentError(requestId);\n\t\t}\n\n\t\tconst deferredPromise = new Web3DeferredPromise<JsonRpcResponseWithResult<ResultType>>();\n\t\tdeferredPromise.catch(error => {\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t});\n\t\tconst reqItem: SocketRequestItem<API, Method, JsonRpcResponseWithResult<ResultType>> = {\n\t\t\tpayload: request,\n\t\t\tdeferredPromise,\n\t\t};\n\n\t\tif (this.getStatus() === 'connecting') {\n\t\t\tthis._pendingRequestsQueue.set(requestId, reqItem);\n\n\t\t\treturn reqItem.deferredPromise;\n\t\t}\n\n\t\tthis._sentRequestsQueue.set(requestId, reqItem);\n\n\t\ttry {\n\t\t\tthis._sendToSocket(reqItem.payload);\n\t\t} catch (error) {\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t}\n\n\t\treturn deferredPromise;\n\t}\n\n\tprotected _onConnect() {\n\t\tthis._connectionStatus = 'connected';\n\t\tthis._reconnectAttempts = 0;\n\t\tsuper._onConnect();\n\t\tthis._sendPendingRequests();\n\t}\n\n\tprivate _sendPendingRequests() {\n\t\tfor (const [id, value] of this._pendingRequestsQueue.entries()) {\n\t\t\tthis._sendToSocket(value.payload as Web3APIPayload<API, any>);\n\t\t\tthis._pendingRequestsQueue.delete(id);\n\t\t\tthis._sentRequestsQueue.set(id, value);\n\t\t}\n\t}\n\n\tprotected _onMessage(event: MessageEvent): void {\n\t\tconst responses = this._parseResponses(event);\n\t\tif (isNullish(responses) || responses.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (const response of responses) {\n\t\t\tif (\n\t\t\t\tjsonRpc.isResponseWithNotification(response as JsonRpcNotification) &&\n\t\t\t\t(response as JsonRpcNotification).method.endsWith('_subscription')\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst requestId = jsonRpc.isBatchResponse(response)\n\t\t\t\t? (response as unknown as JsonRpcBatchResponse)[0].id\n\t\t\t\t: (response as unknown as JsonRpcResponseWithResult).id;\n\n\t\t\tconst requestItem = this._sentRequestsQueue.get(requestId);\n\n\t\t\tif (!requestItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tjsonRpc.isBatchResponse(response) ||\n\t\t\t\tjsonRpc.isResponseWithResult(response) ||\n\t\t\t\tjsonRpc.isResponseWithError(response)\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\trequestItem.deferredPromise.resolve(response);\n\t\t\t}\n\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\t\t}\n\t}\n\t\n\tpublic clearQueues(event?: ConnectionEvent) {\n\t\tthis._clearQueues(event);\n\t}\n\n\tprotected _clearQueues(event?: ConnectionEvent) {\n\t\tif (this._pendingRequestsQueue.size > 0) {\n\t\t\tthis._pendingRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._pendingRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis._removeSocketListeners();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}